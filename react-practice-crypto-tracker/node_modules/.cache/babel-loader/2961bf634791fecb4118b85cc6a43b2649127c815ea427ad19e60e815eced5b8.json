{"ast":null,"code":"const BASE_URL=\"https://api.coinpaprika.com/v1\";// export async function fetchCoins() {\n// \tconst response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\n// \tconst json = await response.json();\n// \treturn json;\n// }\nexport function fetchCoins(){return fetch(\"\".concat(BASE_URL,\"/coins\")).then(response=>response.json());}export function fetchCoinInfo(coinId){return fetch(\"\".concat(BASE_URL,\"/coins/\").concat(coinId)).then(response=>response.json());}export function fetchCoinTickers(coinId){return fetch(\"\".concat(BASE_URL,\"/tickers/\").concat(coinId)).then(response=>response.json());}// export function fetchCoinHistory(coinId: string) {\n// \t// https://api.coinpaprika.com/#tag/Coins/paths/~1coins~1%7Bcoin_id%7D~1ohlcv~1historical/get\n// \t// 우리가 언제를 기준으로 데이터를 받고 싶은지를 말하는 query parameter가 필요하다.\n// \t// ?start=2019-01-01&end=2019-01-20\n// \t// - Supported formats\n// \t//   ㄴ RFC3999 (ISO-8601) eg. 2018-02-15T05:15:00Z\n// \t//   ㄴ Simple date (yyyy-mm-dd) eg. 2018-02-15\n// \t//   ㄴ Unix timestamp (in seconds) eg. 1518671700\n// \t//\n// \t// 이제는 무료 limit는 1일 \"미만\"이고 그 이상은 유료화되서 하루 전 날짜 ~ 현재 동향 데이터만 가져오기로 함.\n// \tconst endDate = Math.floor(Date.now() / 1000);\n// \t// const startDate = endDate - 60 * 60 * 24 * 7; // 1주일 전\n// \tconst startDate = endDate - 60 * 60 * 24 + 60; // 하루 전 + 1분\n// \treturn fetch(\n// \t\t`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n// \t).then((response) => response.json());\n// }\nexport function fetchCoinHistory(coinId){// Coinpaprika API 는 더이상 무료가 아닙니다. ㅠㅠ\n// 그래서 니꼬가 자체 API 를 만들었어요.\n// 자체 URL:\n// https://ohlcv-api.nomadcoders.workers.dev\n// 사용을 위해서는. 파라미터로 coinId 를 추가하세요.\n// https://ohlcv-api.nomadcoders.workers.dev?coinId=btc-bitcoin\nreturn fetch(\"https://ohlcv-api.nomadcoders.workers.dev?coinId=\".concat(coinId)).then(response=>response.json());}","map":{"version":3,"names":["BASE_URL","fetchCoins","fetch","concat","then","response","json","fetchCoinInfo","coinId","fetchCoinTickers","fetchCoinHistory"],"sources":["E:/Projects/digital-nomad-life/react-practice-crypto-tracker/src/api.ts"],"sourcesContent":["const BASE_URL = \"https://api.coinpaprika.com/v1\";\r\n\r\n// export async function fetchCoins() {\r\n// \tconst response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\r\n// \tconst json = await response.json();\r\n// \treturn json;\r\n// }\r\n\r\nexport function fetchCoins() {\r\n\treturn fetch(`${BASE_URL}/coins`).then((response) => response.json());\r\n}\r\n\r\nexport function fetchCoinInfo(coinId: string) {\r\n\treturn fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n\t\tresponse.json()\r\n\t);\r\n}\r\n\r\nexport function fetchCoinTickers(coinId: string) {\r\n\treturn fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n\t\tresponse.json()\r\n\t);\r\n}\r\n\r\n// export function fetchCoinHistory(coinId: string) {\r\n// \t// https://api.coinpaprika.com/#tag/Coins/paths/~1coins~1%7Bcoin_id%7D~1ohlcv~1historical/get\r\n// \t// 우리가 언제를 기준으로 데이터를 받고 싶은지를 말하는 query parameter가 필요하다.\r\n// \t// ?start=2019-01-01&end=2019-01-20\r\n// \t// - Supported formats\r\n// \t//   ㄴ RFC3999 (ISO-8601) eg. 2018-02-15T05:15:00Z\r\n// \t//   ㄴ Simple date (yyyy-mm-dd) eg. 2018-02-15\r\n// \t//   ㄴ Unix timestamp (in seconds) eg. 1518671700\r\n// \t//\r\n// \t// 이제는 무료 limit는 1일 \"미만\"이고 그 이상은 유료화되서 하루 전 날짜 ~ 현재 동향 데이터만 가져오기로 함.\r\n\r\n// \tconst endDate = Math.floor(Date.now() / 1000);\r\n// \t// const startDate = endDate - 60 * 60 * 24 * 7; // 1주일 전\r\n// \tconst startDate = endDate - 60 * 60 * 24 + 60; // 하루 전 + 1분\r\n\r\n// \treturn fetch(\r\n// \t\t`${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\r\n// \t).then((response) => response.json());\r\n// }\r\n\r\nexport function fetchCoinHistory(coinId: string) {\r\n\t// Coinpaprika API 는 더이상 무료가 아닙니다. ㅠㅠ\r\n\t// 그래서 니꼬가 자체 API 를 만들었어요.\r\n\t// 자체 URL:\r\n\t// https://ohlcv-api.nomadcoders.workers.dev\r\n\t// 사용을 위해서는. 파라미터로 coinId 를 추가하세요.\r\n\t// https://ohlcv-api.nomadcoders.workers.dev?coinId=btc-bitcoin\r\n\r\n\treturn fetch(\r\n\t\t`https://ohlcv-api.nomadcoders.workers.dev?coinId=${coinId}`\r\n\t).then((response) => response.json());\r\n}\r\n"],"mappings":"AAAA,KAAM,CAAAA,QAAQ,CAAG,gCAAgC,CAEjD;AACA;AACA;AACA;AACA;AAEA,MAAO,SAAS,CAAAC,UAAUA,CAAA,CAAG,CAC5B,MAAO,CAAAC,KAAK,IAAAC,MAAA,CAAIH,QAAQ,UAAQ,CAAC,CAACI,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACtE,CAEA,MAAO,SAAS,CAAAC,aAAaA,CAACC,MAAc,CAAE,CAC7C,MAAO,CAAAN,KAAK,IAAAC,MAAA,CAAIH,QAAQ,YAAAG,MAAA,CAAUK,MAAM,CAAE,CAAC,CAACJ,IAAI,CAAEC,QAAQ,EACzDA,QAAQ,CAACC,IAAI,CAAC,CACf,CAAC,CACF,CAEA,MAAO,SAAS,CAAAG,gBAAgBA,CAACD,MAAc,CAAE,CAChD,MAAO,CAAAN,KAAK,IAAAC,MAAA,CAAIH,QAAQ,cAAAG,MAAA,CAAYK,MAAM,CAAE,CAAC,CAACJ,IAAI,CAAEC,QAAQ,EAC3DA,QAAQ,CAACC,IAAI,CAAC,CACf,CAAC,CACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAO,SAAS,CAAAI,gBAAgBA,CAACF,MAAc,CAAE,CAChD;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,CAAAN,KAAK,qDAAAC,MAAA,CACyCK,MAAM,CAC3D,CAAC,CAACJ,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}